<?php

namespace Database\Factories;

use App\Models\Post;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Arr;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Comment>
 */
class CommentFactory extends Factory
{
    private int $commentsCount = 0;
    private array $comments = [
        'Так, а что делать в других таких случаях? Если в проставленных локациях отмечено как не принятое, а я считаю, что большинство явно ошиблось? Вот бы в этой таблице в красных строках появлялся выбор: "1. действительно я ошибся", "2. большинство тоже право", "3. большинство явно не право".  Суть в том, что когда один ошибся, то следующие правильные ответы ещё могут большинством перебить неправильный. Но, когда неправильных оказывается большинство, и вопрос закрывается, то нет возможности это исправить. И вот, галочка о том, что я не согласен, дала бы системе знать, что вопрос спорный, и нужно продолжать задавать его, чтоб дать шанс варианту набрать большинство.',
        'Здравствуйте! Долго искал координаты ДТП в Екатеринбурге, но так и не нашёл. Нажал на кнопку "не удаётся определить местоположение". А сегодня проезжал по улице и увидел - вот оно! Есть ли возможность найти то ДТП, я бы проставил геопозицию?',
        'Напишите пожалуйста есть ли смысл проставлять геолокации для Украины? Это вообще куда-то пойдет потом?',
        'Здравствуйте, да смысл имеет. Эти ДТП также, как и остальные будут отображаться на карте.',
        'Здесь спорный момент, что считать местом аварии. Где все началось (и было спровоцировано начало заноса), или где закончилось (место удара). Я поставил примерно среднюю точку - как раз на развилке.',
        'Сам занос или подрезание это еще не ДТП, касание или удар - это да. Василий уже отвечал по этому поводу.',
        'Спасибо! Проверил, исправил и доначислил вам +30 рейтинга.',
    ];

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        if (rand(1, 5) !== 1 && $this->commentsCount++) {
            $parentCommentId = rand(1, $this->commentsCount);
        }

        return [
            'body' => Arr::random($this->comments),
            'published_at' => $this->faker->dateTimeBetween(),
            'post_id' => Post::latest('published_at')->first()->id,
            'user_id' => User::inRandomOrder()->first()->id,
            'parent_id' => $parentCommentId ?? null,
        ];
    }
}
